#pragma config(Hubs,  S1, HTMotor,  HTMotor,  HTMotor,  HTMotor)
#pragma config(Hubs,  S3, HTServo,  none,     none,     none)
#pragma config(Sensor, S2,     HTSMUX,              sensorI2CCustom)
#pragma config(Sensor, S4,     RGB,            sensorCOLORFULL)
#pragma config(Motor,  mtr_S1_C1_1,     yellow,        tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S1_C1_2,     red,           tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C2_1,     blue,          tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C2_2,     green,         tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C3_1,     arm,           tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S1_C3_2,     whisk,         tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C4_1,     lift,          tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C4_2,     flag,          tmotorTetrix, openLoop)
#pragma config(Servo,  srvo_S3_C1_1,    autoflipper,          tServoStandard)
#pragma config(Servo,  srvo_S3_C1_2,    wrist,                tServoStandard)
#pragma config(Servo,  srvo_S3_C1_3,    servo3,               tServoNone)
#pragma config(Servo,  srvo_S3_C1_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S3_C1_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S3_C1_6,    servo6,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

// gyrodrive.c

//the SMUX is plugged into PORT 2
//   the gyro is in port 4 of the SMUX
//   the ir is in port 3 of the SMUX

#include "JoystickDriver.c";
#include "statuslight.c";
#include "Sample Programs\NXT\3rd Party Sensor Drivers\drivers\XanderDriverSuite\rdpartyrobotcdr-3.3.1\drivers\hitechnic-sensormux.h"
//regular driver
//#include "Sample Programs\NXT\3rd Party Sensor Drivers\drivers\hitechnic-gyro.h"

#include "Sample Programs\NXT\3rd Party Sensor Drivers\drivers\XanderDriverSuite\rdpartyrobotcdr-3.3.1\drivers\hitechnic-gyro.h"    //for gyro sensor
//#include "Sample Programs\NXT\3rd Party Sensor Drivers\drivers\XanderDriverSuite\rdpartyrobotcdr-3.3.1\drivers\LEGOUS-driver.h"    //for sonar sensor
#include "Sample Programs\NXT\3rd Party Sensor Drivers\drivers\XanderDriverSuite\rdpartyrobotcdr-3.3.1\drivers\hitechnic-irseeker-v2.h"    //for IR seeker sensor
//#include "Sample Programs\NXT\3rd Party Sensor Drivers\drivers\XanderDriverSuite\rdpartyrobotcdr-3.3.1\drivers\LEGOTS-driver.h"    //for touch sensor

#define HTGYRO              msensor_S2_4
//#define sonarSensor             msensor_S4_2
#define INF          msensor_S2_3
//#define touchSensor             msensor_S4_1

int gyroloop = 0;
float heading = 0;
string direction = "yellow";
void initializeRobot(){
	nNoMessageCounterLimit = 100;
	motor[arm] = 0;
	return;
}
float DZ(float input){
	if(input > -10 && input < 10){
		return 0;
		}else{
		return input;
	}
}

int whiskeeeee = 0;

task autoflip(){
	int switcha = 0;
	int switchb = 1;
	wait10Msec(500);
	servo[autoflipper] = 0;
	wait10Msec(100);
	servo[autoflipper] = 240;
	while(true){
		if((joy2Btn(1)) && (switcha == 0)){
			switcha = 1;
		}
		if((joy2Btn(1) != true) && (switcha == 1)){
			switcha = 0;
			switchb *= -1;
		}
		if(switchb == 1){
			servo[autoflipper] = 240;
		}
		if(switchb == -1){
			servo[autoflipper] = 0;
		}
		abortTimeslice();
	}
}


task directionCont(){
	while(true){
		getJoystickSettings(joystick);
		if(joy1Btn(1)){
			direction = "blue";
			}else if(joy1Btn(2)){
			direction = "yellow";
			}else if(joy1Btn(3)){
			direction = "red";
			}else if(joy1Btn(4)){
			direction = "green";
		}
		abortTimeslice();
	}
}
task drive(){

	int turn;
	while(true){
		if (gyroloop == 0){
			if(joystick.joy1_TopHat == 2){
				turn = 100;
				}else if(joystick.joy1_TopHat == 6){
				turn = -100;
				}else{
				turn = 0;
			}

			getJoystickSettings(joystick);
			if(direction == "red"){
				motor[red] = (((DZ(joystick.joy1_y1)+DZ(joystick.joy1_x1))/128.0)*100) - turn;
				motor[green] = (((DZ(joystick.joy1_y1)-DZ(joystick.joy1_x1))/128.0)*100) - turn;
				motor[blue] = -(((DZ(joystick.joy1_y1)+DZ(joystick.joy1_x1))/128.0)*100) - turn;
				motor[yellow] = (((DZ(joystick.joy1_x1)-DZ(joystick.joy1_y1))/128.0)*100) - turn;

				}else if(direction == "green"){
				motor[green] = (((DZ(joystick.joy1_y1)+DZ(joystick.joy1_x1))/128.0)*100) - turn;
				motor[blue] = (((DZ(joystick.joy1_y1)-DZ(joystick.joy1_x1))/128.0)*100) - turn;
				motor[yellow] = -(((DZ(joystick.joy1_y1)+DZ(joystick.joy1_x1))/128.0)*100) - turn;
				motor[red] = (((DZ(joystick.joy1_x1)-DZ(joystick.joy1_y1))/128.0)*100) - turn;

				}else if(direction == "blue"){
				motor[blue] = (((DZ(joystick.joy1_y1)+DZ(joystick.joy1_x1))/128.0)*100) - turn;
				motor[yellow] = (((DZ(joystick.joy1_y1)-DZ(joystick.joy1_x1))/128.0)*100) - turn;
				motor[red] = -(((DZ(joystick.joy1_y1)+DZ(joystick.joy1_x1))/128.0)*100) - turn;
				motor[green] = (((DZ(joystick.joy1_x1)-DZ(joystick.joy1_y1))/128.0)*100) - turn;

				}else if(direction == "yellow"){
				//default direction
				motor[yellow] = (((DZ(joystick.joy1_y1)+DZ(joystick.joy1_x1))/128.0)*100) - turn;
				motor[red] = (((DZ(joystick.joy1_y1)-DZ(joystick.joy1_x1))/128.0)*100) - turn;
				motor[green] = -(((DZ(joystick.joy1_y1)+DZ(joystick.joy1_x1))/128.0)*100) - turn;
				motor[blue] = (((DZ(joystick.joy1_x1)-DZ(joystick.joy1_y1))/128.0)*100) - turn;
			}
		}
		abortTimeslice();
	}
}


task gyrodrive(){
	////////////////////////////////////////////////////////////////////////////////////
	//                                Gyro Mode Zone                                  //
	////////////////////////////////////////////////////////////////////////////////////

	//enter gyro mode
	// Hold down both buttons 9 and 10 (should be middle buttons) BE SURE ROBOT IS FACING AWAY FROM YOU.
	while(true){
		if (joy2Btn(3)){
			//set to 0 before cal
			color1 = "red";
			motor[yellow] = 0;
			motor[green] = 0;
			motor[red] = 0;
			motor[blue] = 0;
			motor[arm] = 0;
			HTGYROstartCal(HTGYRO);
			color1 = "green";

			// Calibrating & reset
			heading = 0;
		}
		if((joy1Btn(9)) && (joy1Btn(10))){
			PlayTone(784,15);	wait10Msec(19);
			PlayTone(784,15);	wait10Msec(19);
			PlayTone(784,15);	wait10Msec(19);
			PlayTone(622,38);	wait10Msec(38);
			wait10Msec(200); //allow time for fingers to get off the keys
			gyroloop = 1;
			disableDiagnosticsDisplay();
			eraseDisplay();
			nxtDisplayCenteredTextLine(2, "Gyro Enabled");

			float rotSpeed = 0;
			heading = 0;

			// Calibrating
			color1 = "red";
			motor[yellow] = 0;
			motor[green] = 0;
			motor[red] = 0;
			motor[blue] = 0;
			motor[arm] = 0;
			color1 = "green";

			// Reset the timer.
			time1[T1] = 0;

			while (gyroloop == 1){
				// timeout 20ms
				while (time1[T1] < 10)
					wait1Msec(1);

				// Read rotation speed
				rotSpeed = HTGYROreadRot(HTGYRO);

				/* Calculate the new heading by adding the amount of degrees
				we've turned in the last 20ms
				If our current rate of rotation is 100 degrees/second,
				then we will have turned 100 * (20/1000) = 2 degrees since
				the last time we measured.*/
				//variance compensator for integration with multiple tasks
				heading += rotSpeed * (time1[T1] / 1000.0);
				nxtDisplayCenteredTextLine(4, "Timer: %2.3f", (time1[T1]));

				// Reset timer
				time1[T1]=0;

				// Display degrees from start position

				nxtDisplayCenteredTextLine(3, "Heading: %2.3f", heading);
				//reset if over 360 degrees:
				if (heading >= 360){
					heading = (heading - 360);
				}
				//reset if under 0:
				if (heading <= -1){
					heading = (heading + 360);
				}

				//ultimate omni drive code:
				getJoystickSettings(joystick);

				long X = ((-joystick.joy1_x1)*cos((heading*PI)/180)) + ((-joystick.joy1_y1)*sin((heading*PI)/180));
				long Y = ((-joystick.joy1_y1)*cos((heading*PI)/180)) - ((-joystick.joy1_x1)*sin((heading*PI)/180));


				//float spin = joystick.joy1_x2;
				//float theta = degreesToRadians(heading / 10);

				// ==== adjust for gyro angle ====
				//long x = ((-joystick.joy1_x1)*cos((heading*PI)/180)) + ((-joystick.joy1_y1)*sin((heading*PI)/180));
				//long y = ((-joystick.joy1_y1)*cos((heading*PI)/180)) - ((-joystick.joy1_x1)*sin((heading*PI)/180));

				//long y = joystick.joy1_y1 * cos(theta) - joystick.joy1_x1 * sin(theta);
				//long x = joystick.joy1_y1 * sin(theta) + joystick.joy1_x1 * cos(theta);

				float max = abs(motor[green]);
				if (abs(motor[red])>max) max = abs(motor[red]);
				if (abs(motor[blue])>max) max = abs(motor[blue]);
				if (abs(motor[yellow])>max) max = abs(motor[yellow]);
				if (max>1)
				{motor[green]/=max; motor[red]/=max; motor[blue]/=max; motor[yellow]/=max;}

				// ==== calculate speeds ====
				motor(green) = DZ(X+Y+joystick.joy1_x2);
				motor(blue) = DZ(Y-X+joystick.joy1_x2);
				motor(red) = DZ(X-Y+joystick.joy1_x2);
				motor(yellow) = DZ(joystick.joy1_x2-X-Y);

				if (joystick.joy1_TopHat == 4)
					heading = 0;

				//exiting gyro mode:
				if((joy1Btn(9)) && (joy1Btn(10))){

					PlayTone(622,38);	wait10Msec(38);
					PlayTone(784,15);	wait10Msec(19);
					PlayTone(784,15);	wait10Msec(19);
					PlayTone(784,15);	wait10Msec(19);
					gyroloop = 0;

					eraseDisplay();
					bDisplayDiagnostics = true;
				}//end while
			}//second button press
		}//for first button press
	}//close while true
}//close task

////////////////////////////////////////////////////////////////////////////////////
//                            End Gyro Mode Zone                                  //
////////////////////////////////////////////////////////////////////////////////////



task lifter(){
	while(true){
		if(joy1Btn(8)){
			motor[lift] = -100;
			}else if(joy1Btn(6)){
			motor[lift] = 100;
			}else if(joy2Btn(8)){
			motor[lift] = -100;
			}else if(joy2Btn(6)){
			motor[lift] = 100;
			}else{
			motor[lift] = 0;
		}
		abortTimeslice();
	}
}
task flagger(){
	while(true){
		if(joy1Btn(5)){
			motor[flag] = 100;
			}else if(joy2Btn(5)){
			motor[flag] = 100;
			}else{
			motor[flag] = 0;
		}
		abortTimeslice();
	}
}
task armer(){
	// Start Array Smoothing //
	int number = 0;
	float values[10] = {0,0,0,0,0,0,0,0,0,0};
	while(true){
		getJoystickSettings(joystick);
		if(number > 9){
			number = 0;
		}

		values[number] = joystick.joy2_y1;

		float smoothed_array = ((values[0]+values[1]+values[2]+values[3]+values[4]+values[5]+values[6]+values[7]+values[8]+values[9])/10);
		if(smoothed_array < 0){
			if(nMotorEncoder[arm] < 10){
				motor[arm] = 0;
				}else{
				if(nMotorEncoder[arm] > 9000){
					if(smoothed_array > 0){
						motor[arm] = 0;
						}else{
						motor[arm] = (DZ(smoothed_array)/2);
					}
					}else{
					motor[arm] = (DZ(smoothed_array)/2);
				}
			}
			}else{
			if(nMotorEncoder[arm] > 9000){
				if(smoothed_array > 0){
					motor[arm] = 0;
					}else{
					motor[arm] = (DZ(smoothed_array)/2);
				}
				}else{
				motor[arm] = (DZ(smoothed_array)/2);
			}
		}

		number ++;
		wait10Msec(3);
		servo[wrist] -= ((DZ(joystick.joy2_y2))/20);
		// End Array Smoothing //

		// Start Auto Buttons //
		if(joy2Btn(9)){
			whiskeeeee = 1;
			//even though it says 8
			servo[wrist] = 0;
			wait10Msec(50);
			while(nMotorEncoder[arm] > 10 && joystick.joy2_TopHat == -1){
				motor[arm] = -30;
				motor[whisk] = 20;
			}
			motor[arm] = 0;
			servo[wrist] = 123;
			wait10Msec(100);
			motor[whisk] = 0;
			whiskeeeee = 0;
			}else if(joy2Btn(10)){
			whiskeeeee = 1;
			//even though it says 9
			servo[wrist] = 0;
			wait10Msec(70);
			while(nMotorEncoder[arm] < 6647 && joystick.joy2_TopHat == -1){
				motor[arm] = 30;
				motor[whisk] = 20;
				if(nMotorEncoder[arm] > 1000){
					servo[wrist] += 1;
					wait1Msec(5);
				}
			}
			motor[arm] = 0;
			servo[wrist] = 255;
			motor[whisk] = 0;
			whiskeeeee = 0;
			// End Auto Buttons //
			//TODO: Make auto button go up farther for fast dump.

		}
		abortTimeslice();
	}
}
task whisker(){
	while(true){
		if(whiskeeeee == 0){
			if(joy1Btn(7)){
				motor[whisk] = 100;
				}else if(joy2Btn(7)){
				motor[whisk] = 100;
				//reverse
				}else if(joy2Btn(2)){
				motor[whisk] = -50;
				}else{
				motor[whisk] = 0;
			}
		}
		abortTimeslice();
	}
}

task lightcolor(){
	color1 = "green";
	color2 = "none";
	int didloosecon = 0;
	while(true){
		if (bDisconnected == true){
			color2 = "red";
			didloosecon = 1;
			motor[blue] = 0;
			motor[yellow] = 0;
			motor[green] = 0;
			motor[red] = 0;
			motor[arm] = 0;
			motor[lift] = 0;
			motor[whisk] = 0;
			}else{
			color2 = "none";
		}
		if (didloosecon == 1 && bDisconnected == false){
			color2 = "green";
			//reset
			didloosecon = 0;
		}
		abortTimeslice();
	}
}

task main(){

	SensorType[RGB] = sensorCOLORGREEN;
	initializeRobot();
	nMotorEncoder[arm] = 0;
	servo[wrist] = 0;
	// make freaking sure the arm is down
	HTGYROstartCal(HTGYRO);
	waitForStart();
	StartTask(directionCont);

	StartTask(drive);

	StartTask(lifter);

	StartTask(armer);

	StartTask(flagger);

	StartTask(whisker);

	StartTask(autoflip);

	StartTask(blinker);

	StartTask(lightcolor);

	StartTask(gyrodrive);
	while(true){
		nxtDisplayTextLine(1,"%f",servo[wrist]);
		nxtDisplayTextLine(2,"%f",nMotorEncoder[arm]);
	}
}
//verticle servo: 177 encoder: 475362
//123 is for scooping [servo] 0 encoder