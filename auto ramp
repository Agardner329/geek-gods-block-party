#pragma config(Hubs,  S1, HTMotor,  HTMotor,  none,     none)
#pragma config(Hubs,  S3, HTServo,  none,     none,     none)
#pragma config(Hubs,  S4, HTMotor,  HTMotor,  none,     none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Sensor, S2,     INF,            sensorHiTechnicIRSeeker1200)
#pragma config(Sensor, S3,     ,               sensorI2CMuxController)
#pragma config(Sensor, S4,     ,               sensorI2CMuxController)
#pragma config(Motor,  mtr_S1_C1_1,     yellow,        tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C1_2,     red,           tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C2_1,     blue,          tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C2_2,     green,         tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S4_C1_1,     arm,           tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S4_C1_2,     whisk,         tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S4_C2_1,     lift,          tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S4_C2_2,     flag,          tmotorTetrix, openLoop)
#pragma config(Servo,  srvo_S3_C1_1,    autoflipper,          tServoStandard)
#pragma config(Servo,  srvo_S3_C1_2,    wrist,                tServoStandard)
#pragma config(Servo,  srvo_S3_C1_3,    servo3,               tServoNone)
#pragma config(Servo,  srvo_S3_C1_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S3_C1_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S3_C1_6,    servo6,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#include "JoystickDriver.c"
waitForStart();

void driveToInf(){
	nMotorEncoder[yellow] = 0;
	while(SensorValue[INF] != 5){
		motor(red) = -60;
		motor(yellow) = 60;
		motor(green) = -60;
		motor(blue) = 60;
	}
	motor(blue) = 0;
	motor(green) = 0;
	motor(yellow) = 0;
	motor(red) = 0;
	servo[autoflipper] = 65;
	wait1Msec(4000);
	servo[autoflipper] = 240;
}
void turnRight(int right){
	nMotorEncoder[yellow] = 0;
	while((nMotorEncoder[yellow] * 360) > right *7000){
		motor(blue) = -50;
		motor(green) = -50;
		motor(yellow) = -50;
		motor(red) = -50;
	}

	motor(blue) = 0;
	motor(green) = 0;
	motor(yellow) = 0;
	motor(red) = 0;

}
void turnLeft(int left){
	nMotorEncoder[yellow] = 0;
	while((nMotorEncoder[yellow] * 360) < -left * 7000){
		motor(blue) = 50;
		motor(green) = 50;
		motor(yellow) = 50;
		motor(red) = 50;
	}

	motor(blue) = 0;
	motor(green) = 0;
	motor(yellow) = 0;
	motor(red) = 0;

}
void returnto(){
	time1[T1] = 0;
	while(nMotorEncoder[yellow] > 0 && time1[T1] < 7000){
		motor(red) = 60;
		motor(yellow) = -60;
		motor(green) = 60;
		motor(blue) = -60;
	}
}
void glide(){
	//	time1[T1] = 0;
	//	while(nMotorEncoder[yellow] > 0 && time1[T1] < 7000){
	motor(red) = 60;
	motor(yellow) = 60;
	motor(green) = -60;
	motor(blue) = -60;
	wait10Msec(20);
}
void ramp(){
	time1[T1] = 0;
	while(nMotorEncoder[yellow] > 0 && time1[T1] < 7000){
		motor(red) = -60;
		motor(yellow) = 60;
		motor(green) = -60;
		motor(blue) = 60;
	}
}

task main ()

{
#include "JoystickDriver.c"
	waitForStart();
	driveToInf();
	returnto();
	//	glide();
	//	ramp();

}